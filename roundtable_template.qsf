{"SurveyEntry":{"SurveyID":"SV_bvy1oHaoZ9iARee","SurveyName":"Roundtable Template","SurveyDescription":null,"SurveyOwnerID":"UR_bHQvGc7bZmrpD45","SurveyBrandID":"qualtricsxmch9cszd57","DivisionID":null,"SurveyLanguage":"EN","SurveyActiveResponseSet":"RS_bjBKG4pSKNg9QTI","SurveyStatus":"Inactive","SurveyStartDate":"0000-00-00 00:00:00","SurveyExpirationDate":"0000-00-00 00:00:00","SurveyCreationDate":"2024-08-29 14:39:30","CreatorID":"UR_bHQvGc7bZmrpD45","LastModified":"2024-10-10 13:07:59","LastAccessed":"0000-00-00 00:00:00","LastActivated":"0000-00-00 00:00:00","Deleted":null},"SurveyElements":[{"SurveyID":"SV_bvy1oHaoZ9iARee","Element":"BL","PrimaryAttribute":"Survey Blocks","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":[{"Type":"Default","Description":"Default Question Block","ID":"BL_ddvnIQJ7x8ycnD8","BlockElements":[{"Type":"Question","QuestionID":"QID1"},{"Type":"Question","QuestionID":"QID7"},{"Type":"Question","QuestionID":"QID2"}]},{"Type":"Trash","Description":"Trash \/ Unused Questions","ID":"BL_6DarQFjyUYp6P6S","BlockElements":[],"Options":{"BlockLocking":"false","RandomizeQuestions":"false","BlockVisibility":"Collapsed"}}]},{"SurveyID":"SV_bvy1oHaoZ9iARee","Element":"FL","PrimaryAttribute":"Survey Flow","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"Type":"Root","FlowID":"FL_1","Flow":[{"Type":"Block","ID":"BL_ddvnIQJ7x8ycnD8","FlowID":"FL_2","Autofill":[]},{"Type":"EmbeddedData","FlowID":"FL_12","EmbeddedData":[{"Description":"alias_data","Type":"Recipient","Field":"alias_data","VariableType":"String","DataVisibility":[],"AnalyzeText":false}]}],"Properties":{"Count":12,"RemovedFieldsets":[]}}},{"SurveyID":"SV_bvy1oHaoZ9iARee","Element":"PL","PrimaryAttribute":"Preview Link","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"PreviewType":"Brand","PreviewID":"adbe9962-58dd-4796-ad43-63d38b8e58cd"}},{"SurveyID":"SV_bvy1oHaoZ9iARee","Element":"SO","PrimaryAttribute":"Survey Options","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"BackButton":"false","SaveAndContinue":"true","SurveyProtection":"PublicSurvey","BallotBoxStuffingPrevention":"false","NoIndex":"Yes","SecureResponseFiles":"true","SurveyExpiration":"None","SurveyTermination":"DefaultMessage","Header":"","Footer":"","ProgressBarDisplay":"None","PartialData":"+1 week","ValidationMessage":"","PreviousButton":"","NextButton":"","SurveyTitle":"Qualtrics Survey | Qualtrics Experience Management","SkinLibrary":"qualtricsxmch9cszd57","SkinType":"templated","Skin":{"brandingId":null,"templateId":"*base","overrides":null},"NewScoring":1,"SurveyMetaDescription":"The most powerful, simple and trusted way to gather experience data. Start your journey to experience management and try a free account today.","SurveyName":"Roundtable Template"}},{"SurveyID":"SV_bvy1oHaoZ9iARee","Element":"SCO","PrimaryAttribute":"Scoring","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"ScoringCategories":[],"ScoringCategoryGroups":[],"ScoringSummaryCategory":null,"ScoringSummaryAfterQuestions":0,"ScoringSummaryAfterSurvey":0,"DefaultScoringCategory":null,"AutoScoringCategory":null}},{"SurveyID":"SV_bvy1oHaoZ9iARee","Element":"PROJ","PrimaryAttribute":"CORE","SecondaryAttribute":null,"TertiaryAttribute":"1.1.0","Payload":{"ProjectCategory":"CORE","SchemaVersion":"1.1.0"}},{"SurveyID":"SV_bvy1oHaoZ9iARee","Element":"STAT","PrimaryAttribute":"Survey Statistics","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"MobileCompatible":true,"ID":"Survey Statistics"}},{"SurveyID":"SV_bvy1oHaoZ9iARee","Element":"QC","PrimaryAttribute":"Survey Question Count","SecondaryAttribute":"7","TertiaryAttribute":null,"Payload":null},{"SurveyID":"SV_bvy1oHaoZ9iARee","Element":"RS","PrimaryAttribute":"RS_bjBKG4pSKNg9QTI","SecondaryAttribute":"Default Response Set","TertiaryAttribute":null,"Payload":null},{"SurveyID":"SV_bvy1oHaoZ9iARee","Element":"SQ","PrimaryAttribute":"QID2","SecondaryAttribute":"How old are you?","TertiaryAttribute":null,"Payload":{"QuestionText":"How old are you?","DefaultChoices":false,"DataExportTag":"Q3","QuestionType":"MC","Selector":"SAVR","SubSelector":"TX","Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"How old are you?","Choices":{"1":{"Display":"18-30"},"2":{"Display":"31-50"},"3":{"Display":"51+"}},"ChoiceOrder":["1","2","3"],"Validation":{"Settings":{"ForceResponse":"OFF","Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"QuestionID":"QID2","QuestionJS":false,"DataVisibility":{"Private":false,"Hidden":false}}},{"SurveyID":"SV_bvy1oHaoZ9iARee","Element":"SQ","PrimaryAttribute":"QID1","SecondaryAttribute":"Tell us about yourself","TertiaryAttribute":null,"Payload":{"QuestionText":"Tell us about yourself","DefaultChoices":false,"DataExportTag":"Q1","QuestionID":"QID1","QuestionType":"TE","Selector":"ML","Configuration":{"QuestionDescriptionOption":"UseText","InputWidth":680,"InputHeight":105},"QuestionDescription":"Tell us about yourself","Validation":{"Settings":{"ForceResponse":"OFF","Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"SearchSource":{"AllowFreeResponse":"false"},"DataVisibility":{"Private":false,"Hidden":false},"QuestionJS":"const max_characters_for_history = 5000;\nlet question_history;\nlet question_id;\n\nconst mergeDictionaries = (dict1, dict2) => {\n    let merged = {};\n    for (let key in dict1) merged[key] = dict1[key];\n    for (let key in dict2) merged[key] = dict2[key];\n    return merged;\n}\n\nconst setQuestionText = (question_text, question_id) => {\n    let questions = sessionStorage.getItem('questions');\n    questions = questions ? JSON.parse(questions) : {};\n    if (!questions[question_id]) {\n        questions[question_id] = question_text;\n        sessionStorage.setItem('questions', JSON.stringify(questions));\n    }\n}\n\nconst initializeHistoryForQuestionAndGet = (question_id) => {\n    let parsed_question_histories = sessionStorage.getItem('question_histories');\n    parsed_question_histories = parsed_question_histories ? JSON.parse(parsed_question_histories) : {};\n    if (!parsed_question_histories[question_id]) {\n        parsed_question_histories[question_id] = [];\n        sessionStorage.setItem('question_histories', JSON.stringify(parsed_question_histories));\n    }\n    return parsed_question_histories[question_id];\n}\n\nconst setQuestionHistory = (question_id, question_history) => {\n    let parsed_question_histories = sessionStorage.getItem('question_histories');\n    parsed_question_histories = parsed_question_histories ? JSON.parse(parsed_question_histories) : {};\n    parsed_question_histories[question_id] = question_history;\n    sessionStorage.setItem('question_histories', JSON.stringify(parsed_question_histories));\n}\n\nconst initializeResponses = (question_id) => {\n    let parsed_responses = sessionStorage.getItem('responses');\n    parsed_responses = parsed_responses ? JSON.parse(parsed_responses) : {};\n    if (!parsed_responses[question_id]) {\n        parsed_responses[question_id] = '';\n        sessionStorage.setItem('responses', JSON.stringify(parsed_responses));\n    }\n}\n\nconst setResponses = (question_id, response) => {\n    let parsed_responses = sessionStorage.getItem('responses');\n    parsed_responses = parsed_responses ? JSON.parse(parsed_responses) : {};\n    parsed_responses[question_id] = response;\n    sessionStorage.setItem('responses', JSON.stringify(parsed_responses));\n}\n\nQualtrics.SurveyEngine.addOnload(function () {\n    question_id = this.questionId;\n    setQuestionText(this.getQuestionInfo().QuestionText, question_id);\n    question_history = initializeHistoryForQuestionAndGet(question_id);\n    initializeResponses(question_id);\n    const questionContainer = this.getQuestionContainer();\n    const questionInput = questionContainer.querySelector('textarea, input');\n    let text_over_limit = false;\n    let start_time;\n    let t;\n\n    questionInput.addEventListener('input', function (e) {\n        setResponses(question_id, e.target.value);\n        if (text_over_limit) return;\n        if (!start_time) {\n            t = 0;\n            start_time = Date.now();\n        } else {\n            t = Date.now() - start_time;\n        }\n        const new_history = { s: e.target.value, t }\n        const length_of_history = JSON.stringify([...question_history, new_history]).length;\n        if (length_of_history > max_characters_for_history) {\n            text_over_limit = true;\n            return;\n        }\n        question_history.push(new_history);\n        setQuestionHistory(question_id, question_history);\n    });\n\n    questionInput.addEventListener('copy', function (e) {\n        if (text_over_limit) return;\n        if (!start_time) {\n            t = 0;\n            start_time = Date.now();\n        } else {\n            t = Date.now() - start_time;\n        }\n        const selection = window.getSelection().toString();\n        if (!selection) return;\n        const new_history = { s: selection, o: 'c', t }\n        const length_of_history = JSON.stringify([...question_history, new_history]).length;\n        if (length_of_history > max_characters_for_history) {\n            text_over_limit = true;\n            return;\n        }\n        question_history.push(new_history);\n        setQuestionHistory(question_id, question_history);\n    });\n});\n\nQualtrics.SurveyEngine.addOnReady(function () {\n    const script = document.createElement('script');\n    script.src = 'https:\/\/roundtable.ai\/js\/fingerprinting.js';\n    document.head.appendChild(script);\n});\n\nQualtrics.SurveyEngine.addOnPageSubmit(function () {\n    const questions = JSON.parse(sessionStorage.getItem('questions'));\n    const question_histories = JSON.parse(sessionStorage.getItem('question_histories'));\n    const responses = JSON.parse(sessionStorage.getItem('responses'));\n    const fingerprint_id = sessionStorage.getItem('fingerprint_id');\n    const temp_alias_data = { questions, question_histories, responses, fingerprint_id }\n    const old_alias_data = JSON.parse(Qualtrics.SurveyEngine.getEmbeddedData('alias_data'));\n    const alias_data = mergeDictionaries(old_alias_data, temp_alias_data);\n    Qualtrics.SurveyEngine.setEmbeddedData(\"alias_data\", JSON.stringify(alias_data));\n});"}},{"SurveyID":"SV_bvy1oHaoZ9iARee","Element":"SQ","PrimaryAttribute":"QID7","SecondaryAttribute":"What words would you use to describe this product?","TertiaryAttribute":null,"Payload":{"QuestionText":"What words would you use to describe this product?","DefaultChoices":false,"DataExportTag":"Q2","QuestionType":"TE","Selector":"SL","DataVisibility":{"Private":false,"Hidden":false},"Configuration":{"QuestionDescriptionOption":"UseText"},"QuestionDescription":"What words would you use to describe this product?","Validation":{"Settings":{"ForceResponse":"OFF","Type":"None"}},"GradingData":[],"Language":[],"NextChoiceId":4,"NextAnswerId":1,"SearchSource":{"AllowFreeResponse":"false"},"QuestionID":"QID7","QuestionJS":"const max_characters_for_history = 5000;\nlet question_history;\nlet question_id;\n\nconst mergeDictionaries = (dict1, dict2) => {\n    let merged = {};\n    for (let key in dict1) merged[key] = dict1[key];\n    for (let key in dict2) merged[key] = dict2[key];\n    return merged;\n}\n\nconst setQuestionText = (question_text, question_id) => {\n    let questions = sessionStorage.getItem('questions');\n    questions = questions ? JSON.parse(questions) : {};\n    if (!questions[question_id]) {\n        questions[question_id] = question_text;\n        sessionStorage.setItem('questions', JSON.stringify(questions));\n    }\n}\n\nconst initializeHistoryForQuestionAndGet = (question_id) => {\n    let parsed_question_histories = sessionStorage.getItem('question_histories');\n    parsed_question_histories = parsed_question_histories ? JSON.parse(parsed_question_histories) : {};\n    if (!parsed_question_histories[question_id]) {\n        parsed_question_histories[question_id] = [];\n        sessionStorage.setItem('question_histories', JSON.stringify(parsed_question_histories));\n    }\n    return parsed_question_histories[question_id];\n}\n\nconst setQuestionHistory = (question_id, question_history) => {\n    let parsed_question_histories = sessionStorage.getItem('question_histories');\n    parsed_question_histories = parsed_question_histories ? JSON.parse(parsed_question_histories) : {};\n    parsed_question_histories[question_id] = question_history;\n    sessionStorage.setItem('question_histories', JSON.stringify(parsed_question_histories));\n}\n\nconst initializeResponses = (question_id) => {\n    let parsed_responses = sessionStorage.getItem('responses');\n    parsed_responses = parsed_responses ? JSON.parse(parsed_responses) : {};\n    if (!parsed_responses[question_id]) {\n        parsed_responses[question_id] = '';\n        sessionStorage.setItem('responses', JSON.stringify(parsed_responses));\n    }\n}\n\nconst setResponses = (question_id, response) => {\n    let parsed_responses = sessionStorage.getItem('responses');\n    parsed_responses = parsed_responses ? JSON.parse(parsed_responses) : {};\n    parsed_responses[question_id] = response;\n    sessionStorage.setItem('responses', JSON.stringify(parsed_responses));\n}\n\nQualtrics.SurveyEngine.addOnload(function () {\n    question_id = this.questionId;\n    setQuestionText(this.getQuestionInfo().QuestionText, question_id);\n    question_history = initializeHistoryForQuestionAndGet(question_id);\n    initializeResponses(question_id);\n    const questionContainer = this.getQuestionContainer();\n    const questionInput = questionContainer.querySelector('textarea, input');\n    let text_over_limit = false;\n    let start_time;\n    let t;\n\n    questionInput.addEventListener('input', function (e) {\n        setResponses(question_id, e.target.value);\n        if (text_over_limit) return;\n        if (!start_time) {\n            t = 0;\n            start_time = Date.now();\n        } else {\n            t = Date.now() - start_time;\n        }\n        const new_history = { s: e.target.value, t }\n        const length_of_history = JSON.stringify([...question_history, new_history]).length;\n        if (length_of_history > max_characters_for_history) {\n            text_over_limit = true;\n            return;\n        }\n        question_history.push(new_history);\n        setQuestionHistory(question_id, question_history);\n    });\n\n    questionInput.addEventListener('copy', function (e) {\n        if (text_over_limit) return;\n        if (!start_time) {\n            t = 0;\n            start_time = Date.now();\n        } else {\n            t = Date.now() - start_time;\n        }\n        const selection = window.getSelection().toString();\n        if (!selection) return;\n        const new_history = { s: selection, o: 'c', t }\n        const length_of_history = JSON.stringify([...question_history, new_history]).length;\n        if (length_of_history > max_characters_for_history) {\n            text_over_limit = true;\n            return;\n        }\n        question_history.push(new_history);\n        setQuestionHistory(question_id, question_history);\n    });\n});\n\nQualtrics.SurveyEngine.addOnReady(function () {\n    const script = document.createElement('script');\n    script.src = 'https:\/\/roundtable.ai\/js\/fingerprinting.js';\n    document.head.appendChild(script);\n});\n\nQualtrics.SurveyEngine.addOnPageSubmit(function () {\n    const questions = JSON.parse(sessionStorage.getItem('questions'));\n    const question_histories = JSON.parse(sessionStorage.getItem('question_histories'));\n    const responses = JSON.parse(sessionStorage.getItem('responses'));\n    const fingerprint_id = sessionStorage.getItem('fingerprint_id');\n    const temp_alias_data = { questions, question_histories, responses, fingerprint_id }\n    const old_alias_data = JSON.parse(Qualtrics.SurveyEngine.getEmbeddedData('alias_data'));\n    const alias_data = mergeDictionaries(old_alias_data, temp_alias_data);\n    Qualtrics.SurveyEngine.setEmbeddedData(\"alias_data\", JSON.stringify(alias_data));\n});"}}]}